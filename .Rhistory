head(as.data.frame(aln))
open(bamFile)
gr<-GRanges(seqnames="Scchr13",ranges=IRanges(start=c(800000),end=c(801000)))
gr
params<-ScanBamParam(which=gr,what=scanBamWhat())
aln<-scanBam(bamFile,param=params)
names(aln)
class(aln)
aln
head(as.data.frame(aln))
pileup_bamFile<-pileup(bamFile)
pileup_bamFile
?pileup
pileup_bamFile<-pileup(aln)
pileup_bamFile$pos
class(pileup_bamFile)
names(pileup_bamFile)
pileup_bamFile$pos
plot(x=pileup_bamFile$pos,y=pileup_bamFile$count)
table(aln$pos)
class(aln[[1]])
class(aln)
sum(table(aln[[1]]$pos)<2)
sum(table(aln[[1]]$pos))-sum(table(aln[[1]]$pos)<2)
table(aln[[1]]$pos))
table(aln[[1]]$pos)
aln[1]
aln==aln[[1]]
aln[[1]]
aln
sum(table(aln[[1]]$pos)>=2)
sum(table(aln[[1]]$pos)>2)
table(aln[[1]]$pos)
bpaths<-list.files(system.file("bam",package="leeBamViews"),pattern="bam$",full=TRUE)
bamView<-BamViews(bpaths)
length(table(aln[[1]]$pos))
bpaths<-list.files(system.file("bam",package="leeBamViews"),pattern="bam$",full=TRUE)
bamView<-BamViews(bpaths)
gr_1<-GRanges(seqnames="Scchr13",ranges=IRanges(start=c(807762),end=c(808068)))
params<-ScanBamParam(which=gr,what=scanBamWhat()) #不確定要不要這行
bamRanges(bamView)<-gr_1
aln_group<-scanBam(bamView)
class(aln_group)
bamView
bamView
bamView<-BamViews(bpaths)
bamView
aln_group
bamView<-BamViews(bpaths)
gr_1<-GRanges(seqnames="Scchr13",ranges=IRanges(start=c(807762),end=c(808068)))
bamRanges(bamView)<-gr_1
aln_group<-scanBam(bamView)
aln_group
names(aln_group)
lapply(aln_group,function(x)x[[1]]$pos)
aln_group_seq<-lapply(aln_group,function(x)x[[1]]$seq)
length(lapply(aln_group_seq,function(x)x[1])) #fail
class(aln_group_seq)
aln_group_seq
length(aln_group_seq[2])
(31+31+116+116+108+94+102+124)/8
library(oligo)
library(GEOquery)
shiny::runApp('Data_prod')
runApp('Data_prod')
runApp('Data_prod')
runApp('Data_prod')
runApp('Data_prod')
runApp('Data_prod')
runApp('Data_prod')
runApp('Data_prod')
runApp('Data_prod')
runApp('Data_prod')
runApp('Data_prod')
runApp('Data_prod')
runApp('Data_prod')
runApp('Data_prod')
runApp('Data_prod')
runApp('Data_prod')
runApp('Data_prod')
runApp('Data_prod')
runApp('Data_prod')
runApp('Data_prod')
runApp('Data_prod')
runApp('Data_prod')
runApp('Data_prod')
runApp('Data_prod')
runApp('Data_prod')
install.packages("shiny")
install.packages("shiny")
shiny::runApp('Data_prod')
runApp('Data_prod')
install.packages('Biocmanger')
chooseCRANmirror()
chooseCRANmirror()
install.packages("BiocManager")
BiocManager::install("Granges")
BiocManager::install("GenomicRanges")
BiocManager::install('IRanges')
BiocManager::install('IRanges')
runApp('Data_prod')
iris
class(iris)
head(iris)
head(iris$Species)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("IRanges")
?`IRanges-constructor`
IRanges(c(1:3), c(5:7),names = c('ali','choutcha'))
IRanges(c(1:3), c(5:7),names = c('ali','choutcha','k'))
IRanges(c(1:3), c(5:7),names = c('ali','choutcha',k))
IRanges(c(1:3), c(5:7),names = c('ali','choutcha','k'))
a=IRanges(c(1:3), c(5:7),names = c('ali','choutcha','k'))
seqinfo(a)
class(seqinfo(a))
runApp('Data_prod')
library('googleVis')
install.packages("googleVis")
library(googleVis)
suppressPackageStartupMessages(library(googleVis))
suppressPackageStartupMessages(library(googleVis))
library(googleVis)
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
---
title: "googleVis"
author: "The Johns Hopkins Data Science Lab"
output:
ioslides_presentation:
logo: ../../img/bloomberg_shield.png
beamer_presentation: default
always_allow_html: yes
---
suppressPackageStartupMessages(library(googleVis))
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400))
print(G,"chart")
G2 <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400,region="150"))
print(G2,"chart")
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
print(Line,"chart")
G <- gvisGeoChart(Exports, "Country", "Profit",options=list(width=200, height=100))
T1 <- gvisTable(Exports,options=list(width=200, height=270))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=400, height=370))
GT <- gvisMerge(G,T1, horizontal=FALSE)
GTM <- gvisMerge(GT, M, horizontal=TRUE,tableOptions="bgcolor=\"#CCCCCC\" cellspacing=10")
print(GTM,"chart")
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=600, height=400))
print(M)
print(M, 'chart', file='myfilename.html')
print(M, 'chart', file='myfilename.html')
print(M, 'chart', file='myfilename.html')
print(M, 'chart')
print(M)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400))
print(G,"chart")
G2 <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400,region="150"))
print(G2,"chart")
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
print(Line,"chart")
G <- gvisGeoChart(Exports, "Country", "Profit",options=list(width=200, height=100))
T1 <- gvisTable(Exports,options=list(width=200, height=270))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=400, height=370))
GT <- gvisMerge(G,T1, horizontal=FALSE)
GTM <- gvisMerge(GT, M, horizontal=TRUE,tableOptions="bgcolor=\"#CCCCCC\" cellspacing=10")
print(GTM,"chart")
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=600, height=400))
print(M)
print(M, 'chart', file='myfilename.html')
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
plot(M,"chart")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
plot(M
)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
plot(M)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
plot(M)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
plot(M)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
plot(M)
m
M
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400))
G
plot(G)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400))
print(G,"chart")
G2 <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400,region="150"))
print(G2,"chart")
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
print(Line,"chart")
G <- gvisGeoChart(Exports, "Country", "Profit",options=list(width=200, height=100))
T1 <- gvisTable(Exports,options=list(width=200, height=270))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=400, height=370))
GT <- gvisMerge(G,T1, horizontal=FALSE)
GTM <- gvisMerge(GT, M, horizontal=TRUE,tableOptions="bgcolor=\"#CCCCCC\" cellspacing=10")
print(GTM,"chart")
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=600, height=400))
print(M)
print(M, 'chart', file='myfilename.html')
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400))
print(G,"chart")
G2 <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400,region="150"))
print(G2,"chart")
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
print(Line,"chart")
G <- gvisGeoChart(Exports, "Country", "Profit",options=list(width=200, height=100))
T1 <- gvisTable(Exports,options=list(width=200, height=270))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=400, height=370))
GT <- gvisMerge(G,T1, horizontal=FALSE)
GTM <- gvisMerge(GT, M, horizontal=TRUE,tableOptions="bgcolor=\"#CCCCCC\" cellspacing=10")
print(GTM,"chart")
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=600, height=400))
print(M)
print(M, 'chart', file='myfilename.html')
knitr::opts_chunk$set(echo = TRUE)
```{r,dependson="gv",results="asis", cache=TRUE}
{r,dependson="gv",results="asis", cache=TRUE}
{r,dependson="gv",results="asis", cache=TRUE}
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400))
print(G,"chart")
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400))
plot(G,"chart")
knitr::opts_chunk$set(echo = TRUE)
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400))
plot(G,"chart")
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400))
plot(G,"chart")
summary(cars)
plot(pressure)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400))
print(G,"chart")
G2 <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400,region="150"))
print(G2,"chart")
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
print(Line,"chart")
G <- gvisGeoChart(Exports, "Country", "Profit",options=list(width=200, height=100))
T1 <- gvisTable(Exports,options=list(width=200, height=270))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=400, height=370))
GT <- gvisMerge(G,T1, horizontal=FALSE)
GTM <- gvisMerge(GT, M, horizontal=TRUE,tableOptions="bgcolor=\"#CCCCCC\" cellspacing=10")
print(GTM,"chart")
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=600, height=400))
print(M)
print(M, 'chart', file='myfilename.html')
install.packages("plotly")
shiny::runApp('Data_prod')
set.seed(2016-07-21)
temp <- rnorm(100, mean = 30, sd = 5)
pressue <- rnorm(100)
dtime <- 1:100
plot_ly(x = ~temp, y = ~pressue, z = ~dtime,
type = "scatter3d", color = ~temp)
set.seed(2016-07-21)
temp <- rnorm(100, mean = 30, sd = 5)
pressue <- rnorm(100)
dtime <- 1:100
plot_ly(x = ~temp, y = ~pressue, z = ~dtime,
type = "scatter3d", color = ~temp)
library(plotly)
set.seed(2016-07-21)
temp <- rnorm(100, mean = 30, sd = 5)
pressue <- rnorm(100)
dtime <- 1:100
plot_ly(x = ~temp, y = ~pressue, z = ~dtime,
type = "scatter3d", color = ~temp)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter",
color = ~factor(cyl), size = ~hp)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter",
color = ~factor(cyl), size = ~hp)
set.seed(2016-07-21)
temp <- rnorm(100, mean = 30, sd = 5)
pressue <- rnorm(100)
dtime <- 1:100
plot_ly(x = ~temp, y = ~pressue, z = ~dtime,
type = "scatter3d", color = ~temp)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter",
color = ~factor(cyl), size = ~hp)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
install.packages("UsingR")
runApp('quiz')
runApp('quiz')
pickXY(my_data)
pickXY(my_data)
pickXY <- function(my_data ) {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(data_frame$X, data_frame$Y, main = "Plot of Y versus X",
xlab = "X", ylab = "Y")
})
observeEvent(input$done, {
stopApp(brushedPoints(data_frame, input$brush,
xvar = "X", yvar = "Y"))
})
}
runGadget(ui, server)
}
pickXY(my_data)
my_data <- data.frame(X = rnorm(100), Y = rnorm(100))
pickXY(my_data)
pickXY <- function( ) {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(data_frame$X, data_frame$Y, main = "Plot of Y versus X",
xlab = "X", ylab = "Y")
})
observeEvent(input$done, {
stopApp(brushedPoints(data_frame, input$brush,
xvar = "X", yvar = "Y"))
})
}
runGadget(ui, server)
}
my_data <- data.frame(X = rnorm(100), Y = rnorm(100))
pickXY(my_data)
plot(data_frame$X, data_frame$Y, main = "Plot of Y versus X",
xlab = "X", ylab = "Y")
library(shiny)
library(miniUI)
pickXY <- function(data_frame) {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(data_frame$X, data_frame$Y, main = "Plot of Y versus X",
xlab = "X", ylab = "Y")
})
observeEvent(input$done, {
stopApp(brushedPoints(data_frame, input$brush,
xvar = "X", yvar = "Y"))
})
}
runGadget(ui, server)
}
my_data <- data.frame(X = rnorm(100), Y = rnorm(100))
pickXY(my_data)
my_data <- data.frame(X = rnorm(100), Y = rnorm(100))
pickXY(my_data)
my_data <- data.frame(X = rnorm(100), Y = rnorm(100))
pickXY(my_data)
pressue
class(pressue)
plot(pressue)
pressue
knitr::opts_chunk$set(echo = TRUE)
shiny::runApp('quiz')
install.packages("reticulate")
install.packages("reticulate")
install.packages("reticulate")
install.packages("reticulate")
install.packages("reticulate")
install.packages("reticulate")
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
q()
setwd("C:/Users/chemk/Desktop/R markdown")
save.image("C:/Users/chemk/Desktop/R markdown/workspace 1.RData")
library(reticulate)
ls
ls()
tinytex::install_tinytex()
